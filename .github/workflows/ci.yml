name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs:
      build_backend:
        description: 'Build backend images'
        required: false
        default: 'true'
        type: boolean
      build_frontend:
        description: 'Build frontend images'
        required: false
        default: 'true'
        type: boolean
      force_build:
        description: 'Force build all components (ignore path conditions)'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            # Get list of changed files
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              git fetch origin ${{ github.event.pull_request.base.sha }}
              CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.sha }}...HEAD)
            else
              # For push events, compare with previous commit
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
            
            # Check if backend files changed
            if echo "$CHANGED_FILES" | grep -q "^backend/"; then
              echo "backend=true" >> $GITHUB_OUTPUT
            else
              echo "backend=false" >> $GITHUB_OUTPUT
            fi
            
            # Check if frontend files changed
            if echo "$CHANGED_FILES" | grep -q "^frontend/"; then
              echo "frontend=true" >> $GITHUB_OUTPUT
            else
              echo "frontend=false" >> $GITHUB_OUTPUT
            fi
          fi

  test-backend:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' || 
      contains(github.event.pull_request.files.*.path, 'backend/') ||
      contains(github.event.pull_request.files.*.path, '.github/workflows/ci.yml')
    
    steps:
    - uses: actions/checkout@v3
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.11'
    
  #   - name: Install dependencies
  #     run: |
  #       cd backend
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
    
    # - name: Run backend tests
    #   run: |
    #     cd backend
    #     python -m pytest tests/ -v

  test-frontend:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' || 
      contains(github.event.pull_request.files.*.path, 'frontend/') ||
      contains(github.event.pull_request.files.*.path, '.github/workflows/ci.yml')
    
    steps:
    - uses: actions/checkout@v3
    
    # - name: Set up Node.js
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: '18'
    #     cache: 'npm'
    #     cache-dependency-path: frontend/package-lock.json
    
    # - name: Install dependencies
    #   run: |
    #     cd frontend
    #     npm ci
    
    # - name: Run frontend tests
    #   run: |
    #     cd frontend
    #     npm test -- --watchAll=false

  build-backend:
    needs: [check-changes, test-backend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && 
      (needs.check-changes.outputs.backend-changed == 'true' || 
       github.event_name == 'workflow_dispatch' ||
       github.event.inputs.force_build == 'true')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Determine image tag
      id: image_tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag=latest" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push backend (Multi-arch)
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/yolo-pose-backend:latest
          ghcr.io/${{ github.repository }}/yolo-pose-backend:${{ steps.image_tag.outputs.tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend:
    needs: [check-changes, test-backend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && 
      (needs.check-changes.outputs.frontend-changed == 'true' || 
       github.event_name == 'workflow_dispatch' ||
       github.event.inputs.force_build == 'true')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Determine image tag
      id: image_tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag=latest" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push frontend (Multi-arch)
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/yolo-pose-frontend:latest
          ghcr.io/${{ github.repository }}/yolo-pose-frontend:${{ steps.image_tag.outputs.tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 