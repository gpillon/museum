name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci.yml'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      contains(github.event.pull_request.files.*.path, 'backend/') ||
      contains(github.event.pull_request.files.*.path, '.github/workflows/ci.yml')
    
    steps:
    - uses: actions/checkout@v3
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.11'
    
  #   - name: Install dependencies
  #     run: |
  #       cd backend
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
    
    # - name: Run backend tests
    #   run: |
    #     cd backend
    #     python -m pytest tests/ -v

  test-frontend:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      contains(github.event.pull_request.files.*.path, 'frontend/') ||
      contains(github.event.pull_request.files.*.path, '.github/workflows/ci.yml')
    
    steps:
    - uses: actions/checkout@v3
    
    # - name: Set up Node.js
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: '18'
    #     cache: 'npm'
    #     cache-dependency-path: frontend/package-lock.json
    
    # - name: Install dependencies
    #   run: |
    #     cd frontend
    #     npm ci
    
    # - name: Run frontend tests
    #   run: |
    #     cd frontend
    #     npm test -- --watchAll=false

  build-backend-amd64:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      github.ref == 'refs/heads/main' && 
      (contains(github.event.head_commit.modified, 'backend/') || 
       contains(github.event.head_commit.modified, '.github/workflows/ci.yml') ||
       github.event_name == 'push')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push backend (AMD64)
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        platforms: linux/amd64
        push: true
        tags: ghcr.io/${{ github.repository }}/yolo-pose-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-backend-arm64:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      github.ref == 'refs/heads/main' && 
      (contains(github.event.head_commit.modified, 'backend/') || 
       contains(github.event.head_commit.modified, '.github/workflows/ci.yml') ||
       github.event_name == 'push')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push backend (ARM64)
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        platforms: linux/arm64
        push: true
        tags: ghcr.io/${{ github.repository }}/yolo-pose-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend-amd64:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      github.ref == 'refs/heads/main' && 
      (contains(github.event.head_commit.modified, 'frontend/') || 
       contains(github.event.head_commit.modified, '.github/workflows/ci.yml') ||
       github.event_name == 'push')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push frontend (AMD64)
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        platforms: linux/amd64
        push: true
        tags: ghcr.io/${{ github.repository }}/yolo-pose-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend-arm64:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      github.ref == 'refs/heads/main' && 
      (contains(github.event.head_commit.modified, 'frontend/') || 
       contains(github.event.head_commit.modified, '.github/workflows/ci.yml') ||
       github.event_name == 'push')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push frontend (ARM64)
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        platforms: linux/arm64
        push: true
        tags: ghcr.io/${{ github.repository }}/yolo-pose-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max 